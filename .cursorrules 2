// Cursor Rules Configuration for Tolly Story Creator

// Project structure description to help AI understand our organization
{
  "projectDescription": "React application for Tolly - a personalized children's story creator. The app helps parents create customized stories for their kids by selecting from book previews, customizing content, and completing checkout.",
  
  // Define file patterns for different parts of the codebase
  "filePatterns": [
    {
      "pattern": "src/components/**/*.js",
      "description": "React components - each file exports a single React component"
    },
    {
      "pattern": "src/pages/**/*.js",
      "description": "Page components representing complete pages in the application"
    },
    {
      "pattern": "src/hooks/**/*.js",
      "description": "Custom React hooks for reusable logic"
    },
    {
      "pattern": "src/context/**/*.js",
      "description": "React context providers for state management"
    }
  ],

  // Code style preferences
  "codeStyle": {
    "preferArrowFunctions": true,
    "preferConst": true,
    "componentStyle": "functional",
    "stateManagement": "hooks"
  },

  // Examples to help AI understand project patterns
  "examples": {
    "componentProps": "Components should use destructured props and have PropTypes defined",
    "pageStructure": "Page components handle data fetching and pass data to presentational components",
    "naming": "Use PascalCase for components, camelCase for functions and variables"
  },
  
  "componentGuidelines": {
    "planning": "Carefully consider the component's purpose, functionality, and design",
    "reasoning": "Think slowly, step by step, and outline your reasoning",
    "reuse": "Check if a similar component already exists before creating new ones",
    "directories": ["src/components/common", "src/components/story", "src/components/layout"]
  },

  "codingPrinciples": {
    "framework": "React with functional components and hooks",
    "readability": "Focus on readability over performance",
    "implementation": "Fully implement all requested functionality",
    "completion": "Leave no TODOs, placeholders or missing pieces",
    "specificity": "Be sure to reference file names and provide complete solutions",
    "conciseness": "Be concise. Minimize unnecessary prose"
  },

  "componentCreation": {
    "naming": "Use PascalCase for component names",
    "structure": "Define props with destructuring and PropTypes",
    "styling": "Use styled-components or CSS modules for styling",
    "imports": "Import common components from appropriate directories",
    "templateExample": "Create a React component named {ComponentName} that {description}. Props should include {props}."
  }
} 